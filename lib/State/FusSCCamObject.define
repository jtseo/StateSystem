../BaseLibrary/FursysCamConverter/FusSCCamObject	EnumStateEvent	EnumVariableDefine
L_LA	typeCheck_nIf	INT32		check is type(0:line, 1:circle, 2:arc, 4:dimension, 8:text)
L_LA	mergeCast_nIf	INT32	EnumStateEvent	if success to merge cast event
L_LA	closed_nIf	INT32		is closed object
L_LA	biggest_nIf	INT32		is biggest object 
L_LA	nocircle_nIf	INT32		is have no circle object
L_SS_LC	exportLayer_strF	STRING		export object by layer
L_LA	drawingBound_nIf	INT32	EnumStateEvent	is collision bound
L_SS_LC	drawingRegist_nF	INT32		drawing set on specific drawing
L_LA	drawingTop_nIf	INT32		is Top drawing
L_LA	drawingRight_nIf	INT32		is Right drawing
L_SS_LC	exportMprHeader_varF	INT32	EnumVariableDefine	export header (extract thick) param is current drawing
L_SS_LC	exportMprHole_varF	INT32	EnumVariableDefine	auto added
L_SS_LC	exportMprPocket_varF	INT32	EnumVariableDefine	auto added
L_SS_LC	exportMprSaw_varF	INT32	EnumVariableDefine	auto added
L_SS_LC	exportMprTrim_varF	INT32	EnumVariableDefine	auto added
L_SS_LC	exportMprHolePenetrate_varF	INT32	EnumVariableDefine	export penetrate hole
L_SS_LC	exportMprPocketPenetrate_varF	INT32	EnumVariableDefine	export penetrate pocket
L_SS_LC	exportMprDepthAdd_nF	INT32		append depth add for penetrate work
L_SS_LC	objHide_nF	INT32		hide from target list
L_SS_LC	sideObjRegist_nF	INT32		add side objects
L_SS_LC	drawingNumMoveInBound_anF	ARRAY_INT32		move all of targets for drawing num by axi
L_SS_LC	drawingNumFlip_anF	ARRAY_INT32		flip all of target objects for drawing num(drawing num, axi)
L_SS_LC	drawingNumSwap_anF	ARRAY_INT32		swap drawing num also 
L_SS_LC	drawingNumRotate_afF	ARRAY_FLOAT		roate all of target objects for drawing num(drawing num, angle)
L_LA	sideDepthTest_nIf	INT32		looking for side object & update depth
L_LA	recogHoleHorizontal_nIf	INT32	EnumStateEvent	check, it is horizontal hole
L_LA	recogObjUnder_nIf	INT32		check, it is under
L_LA	recogHolePenetrate_nIf	INT32		check is penetrate
L_LA	toolDrillSearch_nIf	INT32		looking for a drill
L_LA	toolRoutingSearch_nIf	INT32		looking for a tool for routing
L_SS_LC	drawingRotate_varF	INT32	EnumVariableDefine	roate drawing
L_SS_LC	drawingMirrorLR_varF	INT32	EnumVariableDefine	mirror left/right if variable is '1'
L_SS_LC	drawingMoveInBound_nF	INT32		move drawing in plus area from 0
L_LA	toolDrillPenetrateSearch_nIf	INT32		find in tool for penetrate
L_LA	equipExist_astrIf	STRING		equip_rot.ini has column & value
L_SS_LC	mprTransform_varF	INT32	EnumVariableDefine	roate param 1, mirror by param 2
L_LA	equipDistanceCornerCheck_nIf	INT32		hole is in param from a corner
L_SS_LC	mprMirrorZ_nF	INT32		mirror Z apply
L_SS_LC	recogEdgeCast_nF	INT32	EnumStateEvent	find edge and erase
L_SS_LC	recogOtherPocketCast_nF	INT32	EnumStateEvent	cast inside pockets so it will append the state
L_LA	recogMultiStart_nIf	INT32		check it is starting point to branch multi line
L_SS_LC	drawingDuplicateRemove_nF	INT32		remove duplicated object
L_LA	mprEdgeRoundRemove_nF	INT32		remove edge round(minimum round diameter)
L_LA	recogCoveredByUnder_astrIf	STRING	@CurrentState	check covered & penetrate
L_LA	recogCoveredByUp_astrIf	STRING	@CurrentState	check covered & penetrate
L_SS_LC	dxfSaveStep_strF	STRING		save dxf for this nodes geometry with id
L_LA	objCrossCircleRemove_nIf	INT32	EnumStateEvent	remove cross on circle
L_LA	drawingCrossAloneRemove_nIf	INT32	EnumStateEvent	remove cross alone
L_SS_LC	layerObjAdd_strF	STRING		regist layer obj
L_SS_LC	objShow_nF	INT32		regist on main drawing
L_LA	rectangleMergeCast_nIf	INT32	EnumStateEvent	merge rectangle with free line start
L_SS_LC	dxfSaveSub_strF	STRING		save dxf for subpocket
L_SS_LC	drawingRegistCastNew_nF	INT32	EnumStateEvent	cast event to drawingState to add new object
L_SS_LC	newObjRegist_varF	INT32	EnumVariableDefine	add m_merged_a variable value
L_SS_LC	extPocketTrimRemove_nF	INT32		remove same line with trim line
L_SS_LC	extPocketSupportAdd_nF	INT32		make closed pocket for opened pocket by remove trim
L_SS_LC	exportMprUPocket_varF	INT32	EnumVariableDefine	auto added
L_SS_LC	mprTrimOptimize_nF	INT32		1, 2, 3, 4 first line change to optimize moving distance of head
L_LA	recogObjSmall_fIf	FLOAT		smaller than and attached one
L_LA	recogObjTwosideConnect_nIf	INT32		connected two side are on one object
L_LA	sidePocketColorDepth_nIf	INT32		depth guess by line color
L_LA	recogExtPocketAdd_nIf	INT32		find ext pocket & cast add
L_SS_LC	mprDualLineRemove_nF	INT32		remove dual line in same line
L_SS_LC	exportMprExtpocket_varF	INT32	EnumVariableDefine	export external pocket(no closed polygon)
L_SS_LC	exportMprUextpocket_varF	INT32	EnumVariableDefine	export external under pocket
L_SS_LC	exportMprContourMake_varF	INT32	EnumVariableDefine	make contour & right vector
L_SS_LC	exportContourTrimMake_varF	INT32	EnumVariableDefine	make contour & right vector
L_SS_LC	exportContourTrimUMake_varF	INT32	EnumVariableDefine	make contour & right vector
L_SS_LC	exportContourUMake_varF	INT32	EnumVariableDefine	make contour & right vector
L_LA	recogSideRound_nIf	INT32		check it has side round
L_LA	recogSawEdgeReach_fIf	FLOAT		saw egde reach in value until bound
L_SS_LC	recogSawUpdate_nF	INT32		update length by depth check
L_SS_LC	recogTapered_nF	INT32		make tapered tool line
L_SS_LC	mprTrimSet_nF	INT32		set trim id on CADtoCAM
L_SS_LC	recogStartChange_nF	INT32		find start object & set m_group_id
L_SS_LC	exportMprTapered_varF	INT32	EnumVariableDefine	export tapered edge
L_SS_LC	exportMprUTapered_varF	INT32	EnumVariableDefine	export under tapered edge
L_LA	objTypeDiameterDimension_nIf	INT32		is this diameterDimension
L_LA	annoHoleDepthRegist_nIf	INT32		regist diameter annotation depth
L_LA	holeAnnotationCheck_nIf	INT32		check annotation & update depth
L_LA	RFSingleInnerMake_nIf	INT32	EnumVariableDefine	make inner line
L_LA	RFSingleUnconvexCheck_nIf	INT32	EnumVariableDefine	check unconvex corner
L_SS_LC	RFUnconvexCornerAdd_nF	INT32	EnumVariableDefine	make unconvex inner corner
L_LA	RFInitialize_nIf	INT32	EnumVariableDefine	initialize rear finish 
L_LA	RFLastPocketIn_nIf	INT32	EnumVariableDefine	check no included by pocket
L_SS_LC	RFApprochAdd_varF	INT32	EnumVariableDefine	add approch line
L_LA	RFSingleSideCollision_nIf	INT32	EnumVariableDefine	collision with side obj
L_SS_LC	RFSingleLinePush_nF	INT32	EnumVariableDefine	push line what created on pocket
L_LA	RFLayerFinish_nIf	INT32	EnumVariableDefine	finish a layer
L_SS_LC	pocketClockwiseMake_nF	INT32		change pocket to clockwise
L_SS_LC	RFSingleLinePass_nF	INT32		pass current 
L_SS_LC	dxfSaveRf_strF	STRING		save rear finsh process
L_SS_LC	RFSequenceSizeGet_varF	INT32	EnumVariableDefine	get size of current sequence
L_LA	RFSingleExtendRemove_varIf	INT32	EnumVariableDefine	remove continuses line or circle
L_SS_LC	RFCuttingOffsetSet_nF	INT32		additional space cutting offset value usualy 3
L_SS_LC	RFSequenceRemove_varF	INT32	EnumVariableDefine	remove all of appended RF lines
L_LA	RFCreateEmpty_nIf	INT32	EnumVariableDefine	check m_rfCreate is empty or not & it's last point
L_LA	drawingFront_nIf	INT32		check it's front drawing
L_LA	recogMultiPocket_nIf	INT32		check multi pocket is
L_SS_LC	RFSequenceFinish_nF	INT32		uncompleted rf line organize
L_LA	RFLastPocketRoughIn_nIf	INT32		last created line is not in rough pocket
L_SS_LC	SubpocketRemove_nF	INT32		remove subpocket - As try to make pocket is make incomplete a subpocket, it's make replace m_merged_a in the transform.
L_LA	RFLayerInComplete_nIf	INT32	EnumVariableDefine	check last circle is in origin pocket
L_SS_LC	RFSequenceLastRemove_nF	INT32	EnumVariableDefine	remove list circle in sequence
L_SS_LC	RFLayerComplete_nF	INT32	EnumVariableDefine	connect current polygon and befor polygon
L_LA	RFLayerClosedCheck_varIf	INT32	EnumVariableDefine	layer closed check( last single reached on the first)
L_SS_LC	RFCreateLastRemove_nF	INT32		remove last create
L_SS_LC	mprTaperedEdgeAdapt_nF	INT32		adapt removed edge on trim
L_SS_LC	recogSubpocketDualRemove_nF	INT32		remove duplicated subpocket
L_SS_LC	pocketStartOnTrim_nF	INT32		pocket start make on out trim not from the inside
L_SS_LC	exportMprTail_varF	INT32	EnumVariableDefine	export tail
L_SS_LC	recogEdge2_nF	INT32		find edge from side & set edgeThick
L_LA	objLeaderCheck_nIf	INT32		is leader
L_SS_LC	RFApprochExtAdd_varF	INT32	EnumVariableDefine	add approch line for external pocket
L_SS_LC	pocketReverse_nF	INT32		reverse pocket
L_LA	RFLayerLastCCCheck_nIf	INT32	EnumVariableDefine	check last is count clockwise.
L_LA	RFLayerCCFinish_nIf	INT32	EnumVariableDefine	check last is created
L_LA	RFLayerLastHalfNeeded_nIf	INT32		check needed last half line.
L_SS_LC	Backup_nF	INT32		backup members variable for the geometry information
L_SS_LC	Restore_nF	INT32		restore members variable for the geometry information
L_SS_LC	contourExternMake_varF	INT32	EnumVariableDefine	make contour for external pocket
L_LA	recogLineSingle_nIf	INT32		check is single line
L_LA	recogLongParallelCast_nIf	INT32	EnumStateEvent	if this is a long line(distance from edge) and got parallel long line in near.
L_LA	recogUnknowUpdown_nIf	INT32		the Normal direction is not defined.(middle hole)
L_SS_LC	mprEdgeStartApply_nF	INT32	EnumVariableDefine	apply the edge start position by annotation
L_SS_LC	RFHalfStart_nF	INT32		set rf half line start.
L_SS_LC	subpocketBreak_nF	INT32	EnumStateEvent	slice collied lines & cast on branch
L_LA	recogSideCut_varIf	INT32	EnumVariableDefine	it has side cut
L_LA	subpocketPolygonMake_varIf	INT32	EnumVariableDefine	make polygon by param (0 left, 1 right)
L_LA	subpocketCClockwiseMake_nF	INT32	INT32	EnumVariableDefine	check it's cc
L_LA	subpocketEmpty_varIf	INT32	EnumVariableDefine	check it's has empty in the polygon
L_LA	subpocketSmoodpolygon_varIf	INT32	EnumVariableDefine	check the maked polygon is smood out line
L_SS_LC	subpocketNeighborCast_nF	INT32	EnumVariableDefine	find neighbor
L_SS_LC	subpocketClockwiseMake_nF	INT32		subPolygon 2 make clockwise
L_SS_LC	CapmakerInitialize_nF	INT32		initialize for CapmakerInitialize_nF
L_SS_LC	CapmakerFinalize_nF	INT32		connect cap line with outer
L_SS_LC	subpocketIdReset_nF	INT32		reset object id
L_LA	subpocketEdgeCheck_nIf	INT32		this is edge?
L_LA	TaperedcutSearch_nIf	INT32		search taperedcut lines
L_SS_LC	TaperedcutBranchRemove_nF	INT32		remove the branch of taperedcuts
L_SS_LC	TaperedcutRemove_nF	INT32		remove last subPolygon, it's a tapered line
L_SS_LC	CapmakerRemove_nF	INT32		remove Cap line in m_subpocket_key and m_subpocket_pos
L_SS_LC	TaperedcutToTrim_nF	INT32		position of tapered cut(what recog line) should moved to the Trim line.
L_SS_LC	exportMprTaperedcut_varF	INT32	EnumVariableDefine	export taperedcut
L_SS_LC	caplineRemove_nF	INT32		remove m_capline_a
L_LA	sideDepthDishTest_nIf	INT32		depth test with dish line(slide depth)
L_LA	subpocketIncludeAll_nIf	INT32		include all of objects
L_LA	recogCubePartial_nIf	INT32		is a partial of the cube
L_SS_LC	mergeCubeCast_nF	INT32	EnumStateEvent	search cube and merge, cast event
L_SS_LC	PenetrateSet	INT32		set penetrate.
L_SS_LC	taperedcutConjoin	INT32		join seperated taperedcut by external pockets.
L_SS_LC	objCrossRoundRemove_nF	INT32		remove the cross line what out of bound
L_SS_LC	depthEdgeRemove_nF	INT32		auto added
L_SS_LC	holeCastNew_nF	INT32	EnumStateEvent	cast duplicated side horizontal hole
L_LA	sideObjDepthTestPocket_nIf	INT32	EnumVariableDefine	pocket depth test
L_LA	recogSingleCircleBig_nIf	INT32		is big arc or circle ?
L_SS_LC	layerObjAddConnected_strF	STRING		add obj what circle, arc and connected line with current obj in layer
L_LA	recogDefineHHole_nIf	INT32	EnumStateEvent	check it's h hole & cast delete other obj
L_LA	recogPolygonCast_nIf	INT32	EnumStateEvent	recognition polygon
L_LA	subpocketMeshExist_nIf	INT32		check mesh is exist
L_LA	supocketSearchIndependent_nIf	INT32	EnumVariableDefine	search independent pocket
L_LA	depthOppositeTest_nIf	INT32		depth test but should be opposite direction by current normal
L_SS_LC	exportTools_nF	INT32		export cashed tools
L_SS_LC	exportToolClear_nF	INT32		clear cached tools
L_LA	sideDepthTestExtern_nIf	INT32		additonal depth, only find a perfect depth value, can applied.
L_LA	sideDrwRecogFigure_varIf	INT32	EnumStateEvent	At side drawing, recog corner figure and cas delete
L_LA	recogWidthFilter_nIf	INT32		bigger width true
L_LA	recogDepthFilter_nIf	INT32		smaller depth true
L_LA	sideDepthHoleTest_nIf	INT32		depth test for a hole
L_LA	recogExternRSupHole_fIf	FLOAT		check it's requested support home(cut trim or not)
L_SS_LC	sideObjEdgeRegist_nF	INT32		regist side object what are related edge round
L_SS_LC	recogHDrillDriection_nF	INT32		recognize the direction of Horizontal Hole & fix it.
L_LA	taperedRound_nIf	INT32		check it's round
L_SS_LC	subpocketEdgeRemove_nF	INT32		remove edge in subpocket.
L_LA	recogCircleMulti_nIf	INT32		check, it's seperacted circle & make one
L_SS_LC	exportMprSawPocket_varF	INT32	EnumVariableDefine	export saw by pocket tool
L_SS_LC	exportContourSaw_varF	INT32	EnumVariableDefine	export contour for saw
L_SS_LC	recogTrimPocketCast_nF	INT32	EnumStateEvent	search the trim pockets(it's not a ext pocket) & cast
L_LA	recogCrossHoleExtend_nIf	INT32		is the small cross hole & extend size of radio
L_LA	recogOnEdge_nIf	INT32		this extpocket is on the edge
L_SS_LC	exportHousing_varF	INT32	EnumVariableDefine	export Housing info
L_SS_LC	exportScrew_varF	INT32	EnumVariableDefine	export Screw info
L_SS_LC	exportCasingHeader_varF	INT32	EnumVariableDefine	export casing header
L_LA	objTypeBlock_nIf	INT32		check it is block object
L_LA	objEdgeIgnore_nIf	INT32		check it is ignore edge name.
L_SS_LC	recogEdgeIgnoreRegist_nF	INT32		regist the ignore edge, it will remove the edge information which near this.
L_SS_LC	edgeIgnore_nF	INT32		set 0 for edge thick
L_LA	objEdgeRemove_nIf	INT32		check it is remove edge name.
L_SS_LC	recogEdgeRemoveRegist_nF	INT32		regist the remove edge
L_SS_LC	edgeRemove_nF	INT32		remove edge(do)
L_LA	recogUselessDrill_astrIf	STRING		if find the same positon and bigger radius, it is useless arc
L_SS_LC	recogPartialArcCast_nF	INT32	EnumStateEvent	search useless partial arc & cast event
L_LA	boundBiggerSide_nIf	INT32		check all of single side length(width or height) is bigger than param
L_LA	recogMultiArc_nIf	INT32		check is got more or equal arc objects than param
L_SS_LC	pocketMakeComplete_nF	INT32		make complete pocket what is opened.
